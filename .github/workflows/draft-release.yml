name: Create Milestone and Draft Release
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
jobs:
  create_milestone_and_draft_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0

      - name: Fetch all history for all tags and branches
        run: git fetch --prune

      - name: ðŸ“² Install DotNet
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            9.0.x

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4
        with:
          versionSpec: '5.x'

      - name: Install GitReleaseManager
        uses: gittools/actions/gitreleasemanager/setup@v4
        with:
          versionSpec: '0.13.x'

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4

      - name: Create Milestone
        uses: WyriHaximus/github-action-create-milestone@v1.2.0
        with:
          title: v${{ steps.gitversion.outputs.majorMinorPatch }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        continue-on-error: true

      - name: Get Repo and Owner
        shell: pwsh
        id: repository
        run: |
          $parts = $ENV:GITHUB_REPOSITORY.Split('/')
          echo "::set-output name=owner::$($parts[0])"
          echo "::set-output name=repository::$($parts[1])"

      - name: sync milestones
        uses: RocketSurgeonsGuild/actions/sync-milestone@v0.3.3
        with:
          default-label: ':sparkles: mysterious'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Draft Release
        shell: pwsh
        run: |
          dotnet gitreleasemanager create `
            -o "${{ steps.repository.outputs.owner }}" `
            -r "${{ steps.repository.outputs.repository }}" `
            --token "${{ secrets.RSG_BOT_TOKEN }}" `
            -m "v${{ steps.gitversion.outputs.majorMinorPatch }}"

      - name: Export Changelog
        shell: pwsh
        run: |
          dotnet gitreleasemanager export `
            -o "${{ steps.repository.outputs.owner }}" `
            -r "${{ steps.repository.outputs.repository }}" `
            --token "${{ secrets.GITHUB_TOKEN }}" `
            -f CHANGELOG.md
